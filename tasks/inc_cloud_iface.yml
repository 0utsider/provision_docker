- name: Stop and rm containers
  local_action: "shell docker rm --force {{ item['name'] }} || true"
  with_items: "{{ provision_docker_inventory }}"

- name: Bring up containers
  local_action: "shell docker run -d --name={{ item['name'] }} --privileged --expose=1-65535 {{ item.image|default(provision_docker_image_default) }}"
  with_items: "{{ provision_docker_inventory }}"

# Note: We had to move the invocation of the docker inspect command into a bash
# script because it involces a command line parameter with {{ }}. Registering 
# the results puts the command line params into invocation. Referencing the 
# results variable fails because Ansible runs the invocation through jinja2 
# template engine and the {{.NetworkSettings.IPAddress}} variable does not 
# exist
# TODO: Check if no results (i.e. results.stdout_lines length) returned from
# docker_inspect.sh
- name: Get IP of container
  local_action:
    module: "shell"
    args: "{{ role_path }}/files/docker_inspect.sh {{ item.name }}"
  register: provision_docker_ip
  with_items: "{{ provision_docker_inventory }}"
  changed_when: false

# TODO: copy ALL host vars in the inventory
- name: "Associate ip address with hosts"
  local_action:
    module: add_host
    name: "{{ item.1['name'] }}"
    ansible_ssh_host: "{{ provision_docker_ip.results[item.0].stdout }}"
    ansible_ssh_user: "{{ item.1['ansible_ssh_user']|default(provision_docker_ssh_user) }}"
    ansible_ssh_pass: "{{ item.1['ansible_ssh_pass']|default(provision_docker_ssh_pass) }}"
    groups: "{{ provision_docker_groups | union(item.1['groups']|default([])) | join(',') }}"
  with_indexed_items: "{{ provision_docker_inventory }}"
  changed_when: false

- name: Wait for ssh
  wait_for:
    host: "{{ hostvars[item.name]['ansible_ssh_host'] }}"
    port: 22
    timeout: 30
  with_items: "{{ provision_docker_inventory }}"

- name: Make sure ssh is really up
  ping:
  delegate_to: "{{ item['name'] }}"
  with_items: "{{ provision_docker_inventory }}"

